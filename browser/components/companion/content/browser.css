/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

@import url("chrome://browser/content/companion/lavender.css");

:root {
  /* XXX: should these (and all the other companion stuff for that matter) be
  expressed in em / some other unit? */

  /* Overrides of traditional browser variables: */
  --toolbarbutton-inner-padding: 7px;
  --toolbarbutton-outer-padding: 7px;
  --toolbarbutton-border-radius: 50%;
  --urlbarbutton-border-radius: 4px;
  --urlbar-border-radius: 20px;
  --urlbar-min-height: 40px;
  --urlbarbutton-border-radius: 4px;
  --toolbarbutton-hover-background: var(--colors-warm-hover-02);
  --toolbarbutton-active-background: var(--colors-warm-pressed-02);

  /* pinebuild-specific variables: */
  --companion-width: 340px;
  --companion-min-width: 300px;
  --companion-max-width: 600px;
  --pinebuild-global-background: var(--colors-cafe-01);
  --pinebuild-highlight-color: var(--colors-lavender-05);
  --pinebuild-highlight-text-color: #562ea6;
  --pinebuild-flow-reset-transition-duration: 1s;
  /* I tried using --animation-timing-function for this, but it was too steep
     a curve. We may want to define a different curve than ease-out though. */
  --pinebuild-flow-reset-transition-timing: ease-out;
  --pinebuild-pre-flow-reset-background-color: #8d77b4;
}

@media (prefers-contrast: more) {
  :root {
    --pinebuild-global-background: -moz-default-background-color;
  }
}

/* TODO: check this all in high-contrast mode */
@media not (prefers-contrast) {
  /* Awkwardly, we need the more specific selector here in order to ensure we
     override it. */
  :root:not(:-moz-lwtheme) {
    --toolbar-field-background-color: var(--colors-cafe-02);
  }
}

#urlbar[breakout][breakout-extend] {
  --urlbar-border-radius: 12px;
}

:root:not([chromehidden~="toolbar"]) {
  min-width: 1024px;
}

/* So, this is a bit awkward. Here's the problem: we have a big image, which
   we want to use as a background, and which could take more than a frame to
   upload to the GPU. So, we want to display something in its place before
   it's ready. In our case, we want to display a flat color in its place.
   What we *could* do, is just have a background-color set on body, as well
   as a background-image, and until the image is loaded, Gecko will show the
   background-color. However, this isn't a nice experience, because the
   background image will pop in all at once on top of the color. What would
   be nicer is if we could fade the background image in on top of the color
   over time once it's ready. Unfortunately, things get weird when you want
   to do that. Read on in the comments below for more! */
body {
  /* We start with a transparent background color on the body. This will let
     #global-background and #global-background-inner show through (since they
     have a low z-index). This means we have a transparent-backgrounded body
     sitting on top of a background image which sits on top of a background
     color. We add a transition here so when we go out of flow-reset mode,
     we can just fade our background color to solid, causing the image to
     nicely transition out. If we tried to just animate the background image
     itself, it would just pop away. */
  background-color: transparent;
  transition-property: opacity, background-color;
  transition-duration: var(--pinebuild-flow-reset-transition-duration);
  transition-timing-function: var(--pinebuild-flow-reset-transition-timing);
}

body[browser-ready]:not([flow-reset]) {
  /* This is just our normal solid color background */
  background-color: var(--pinebuild-global-background);
}

#global-background {
  /* This is just a container with a background color that holds the div
     that holds the image. We use position:absolute and a negative z-index
     to have it sit behind all content. */
  z-index: -100;
  position: absolute;
  width: 100%;
  height: 100%;
  background: var(--pinebuild-pre-flow-reset-background-color);
}

#global-background-inner {
  height: 100%;
  width: 100%;
  /* This is where the magic happens. The opacity of 0.01 kicks off the load
     of the image, since it's *technically* visible, but it won't actually be
     perceivable until we set the browser-ready attribute on the body, at
     which point it will fade in per the transition: opacity rule. We could
     implement this as an html:image, however, we get some nice logic for
     free with it being a background through the background-size and
     background-position attributes, which are awkward to achieve through
     HTML/JS. */
  opacity: 0.01;
  background-color: transparent;
  background-image: url("chrome://browser/content/companion/timeofdaybackground.png");
  background-size: cover;
  background-position: center;
  transition: opacity var(--pinebuild-flow-reset-transition-duration) var(--pinebuild-flow-reset-transition-timing);
}

@media (prefers-reduced-motion: reduce) {
  :root {
    --pinebuild-flow-reset-transition-duration: 0s;
  }
}

/* We set the browser-ready attribute the frame after we detect our first
   paint of content in about:flow-reset. This actually is a bit awkward and
   not 100% correct, but it's the best I could figure out. This will nicely
   let us fade everything in all together, but it becomes tricky if
   timeofdaybackground.png hasn't been loaded off disk yet, because then
   we'll start our opacity fade in before we've started to upload the image
   to the GPU. If this is the case, the GPU upload could take long enough
   that the animation drops a bunch of frames and the image just kind of
   pops in anyway. I don't have a better solution here. I haven't had this
   show up in practice, but it could happen on machines with old school
   platter drives. */
body[browser-ready] #global-background-inner {
  opacity: 1;
}

/* We also fade these things in during startup to get a smooth experience. */
body[flow-reset]:not([browser-ready]) #navigator-toolbox,
body[flow-reset]:not([browser-ready]) companion-manager,
body[flow-reset]:not([browser-ready]) .browserStack > browser {
  transition: opacity var(--pinebuild-flow-reset-transition-duration) var(--pinebuild-flow-reset-transition-timing);
}

body:not([browser-ready]) #navigator-toolbox,
body:not([browser-ready]) companion-manager,
body:not([browser-ready]) .browserStack > browser {
  opacity: 0;
}

/* Oddly, despite the browser transitioning opacity above, the browser's
   border immediately pops in. These two blocks fix that. */
.browserStack > browser {
  border-color: transparent;
  transition: border-color var(--pinebuild-flow-reset-transition-duration) var(--pinebuild-flow-reset-transition-timing);
}

:root[companion] body:not([flow-reset]) .browserStack > browser {
  border-inline-start: 1px solid var(--colors-cafe-04);
  border-start-start-radius: 8px;
  border-top: 1px solid var(--colors-cafe-04);
}

#navigator-toolbox,
#navigator-toolbox:not(:-moz-lwtheme),
#tabbrowser-tabpanels,
.browser-toolbar:not(.titlebar-color) {
  background: none;
}

#navigator-toolbox {
  padding-inline-start: 8px;
  border-bottom: none;
}

#titlebar:not([hidden]) + #nav-bar > #pinebuild-window-controls {
  display: none;
}

#PersonalToolbar,
#nav-bar-overflow-button,
#page-action-buttons,
#tracking-protection-icon-container,
#identity-box,
#nav-bar-customization-target > *:not(#urlbar-container, #profiler-button, #companion-sidebar-button, #active-view-manager, [id^="pinebuild-"], #session-setaside-button, toolbarspring:nth-of-type(1)) {
  display: none;
  -moz-box-flex: 1;
}

body[flow-reset] #pinebuild-back-button,
body[flow-reset] #pinebuild-reload-button,
body[flow-reset] #session-setaside-button,
body[flow-reset] active-view-manager {
  display: none;
}

/* When we're in flow reset mode, the urlbar is detached from its container,
   but still a child of it, so we can't make the container display: none.
   However, if we leave it at its normal width, it creates an region of the
   toolbar that can't be used to drag the window.  */
body[flow-reset] #urlbar-container {
  max-width: 0;
}

#nav-bar:hover river-el::part(history) {
  display: flex;
}

#nav-bar:hover river-el::part(domain) {
  display: none;
}

@media (-moz-windows-compositor) {
  /* If we have the titlebar hidden, then we want to have the nav-bar act as the
     titlebar. This will cause us to properly adjust the size and margins of it
     based on OS-settings. For example, without this, the top few pixels of the
     browser will be cut off when maximized. This amount varies based on things
     like screen DPI, so we need to trust the widget code to handle it. To
     accomplish this, we use the adjacent sibling combinator to see if the
     titlebar (which should immediately precede the nav-bar) has the hidden
     attribute. This is a little fragile, but due to the way we toggle this
     attribute based on menubar visibility in browser.js:setToolbarVisibility
     only when changed, and rely on xulstore to persist it, this is probably
     our least fragile option. */
  :root[sizemode="normal"] #titlebar[hidden] + #nav-bar {
    appearance: auto;
    -moz-default-appearance: -moz-window-titlebar;
  }

  :root[sizemode="maximized"] #titlebar[hidden] + #nav-bar {
    appearance: auto;
    -moz-default-appearance: -moz-window-titlebar-maximized;
  }
}

#urlbar:not(.searchButton) > #urlbar-input-container > #pinebuild-search-icon-box {
  /* Ensure that when the user clicks on the contents of this box, it focuses the url bar */
  pointer-events: none;
  padding-inline: var(--urlbar-icon-padding);
  border-radius: var(--urlbar-icon-border-radius);
  fill: currentColor;
  fill-opacity: var(--urlbar-icon-fill-opacity);
  margin-inline-end: var(--identity-box-margin-inline);
}

#urlbar:not(.searchButton) > #urlbar-input-container > #pinebuild-search-icon-box #search-icon {
  -moz-context-properties: fill, fill-opacity;
  background: url(chrome://global/skin/icons/search-glass.svg) no-repeat center;
}

@supports not -moz-bool-pref("browser.companion.tabdebugging") {
  #TabsToolbar {
    display: none;
  }
}

#urlbar-container {
  min-width: 50px;
  max-width: 450px;
  padding: 12px 0;
  transition-property: max-width;
  transition-timing-function: var(--animation-timing-function);
  transition-duration: 0s;
}

[urlbar-exceeds-toolbar-bounds=true] #urlbar-container {
  max-width: 750px;
}

@media (prefers-reduced-motion: no-preference) {
  [urlbar-exceeds-toolbar-bounds=true] #urlbar-container {
    transition-duration: 150ms;
  }
}

[urlbar-exceeds-toolbar-bounds=true] #pinebuild-toolbar {
  width: 270px;
  overflow: hidden;
}

#pinebuild-toolbar {
  display: flex;
  min-height: 64px;
}

[urlbar-exceeds-toolbar-bounds=true] .chromeclass-toolbar-additional {
  display: none;
}

#urlbar::before {
  content: '';
  width: 20px;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
  background: linear-gradient(90deg, transparent 0%, var(--toolbar-bgcolor) 100%);
  margin-left: -25px;
  z-index: -1;
  display: none;
}

#pinebuild-mac-buttonbox                {
  position: relative;
  appearance: auto;
  -moz-default-appearance: -moz-window-button-box;
  margin-inline: 12px;
}

#pinebuild-back-button > .toolbarbutton-icon {
  background: url("chrome://browser/skin/back.svg") no-repeat center;
}

#pinebuild-forward-button > .toolbarbutton-icon {
  background: url("chrome://browser/skin/forward.svg") no-repeat center;
  display: none;
}

@supports -moz-bool-pref("browser.companion.globalhistorydebugging") {
  #pinebuild-forward-button {
    display: -moz-box;
  }
}

#pinebuild-toolbar toolbarbutton:not(#companion-sidebar-button):not([disabled]):hover .toolbarbutton-icon,
#session-setaside-button:hover .toolbarbutton-icon {
  background-color: var(--colors-warm-hover-02);
}

#pinebuild-toolbar toolbarbutton:not(#companion-sidebar-button):not([disabled]):active .toolbarbutton-icon,
#session-setaside-button:active .toolbarbutton-icon {
  background-color: var(--colors-warm-pressed-02);
}

#pinebuild-reload-button > .toolbarbutton-icon {
  background: url("chrome://global/skin/icons/reload.svg") no-repeat center;
}

#pinebuild-stop-button > .toolbarbutton-icon {
  background: url("chrome://global/skin/icons/close.svg") no-repeat center;
}

#pinebuild-reload-button[displaystop],
#pinebuild-reload-button:not([displaystop]) + #pinebuild-stop-button {
  display: none;
}

@supports not -moz-bool-pref("browser.companion.snapshots") {
  #pinebuild-snapshot-button {
    display: none;
  }
}

#pinebuild-snapshot-button {
  background: url("chrome://global/skin/icons/highlights.svg") no-repeat center;
}

#companion-sidebar-button {
  background: url("chrome://browser/skin/sidebars-right.svg") no-repeat center;
  margin-block: auto;
  margin-inline: 40px 16px;
  width: 32px;
  height: 32px;
}

@media (-moz-windows-compositor) {
  #companion-sidebar-button {
    margin-inline: 16px;
  }
}

#pinebuild-view-manager {
  min-width: 50px;
  -moz-box-flex: 1;
}

%ifdef MOZ_WIDGET_COCOA
#pinebuild-window-controls {
  display: none;
}
%else
#pinebuild-mac-buttonbox {
  display: none;
}
%endif

#pinebuild-identity-box #identity-box[pageproxystate="invalid"] #identity-icon-box {
  display: none;
}

#pinebuild-identity-box {
  width: 10px;
  min-width: 10px;
  margin-left: 6px;
}

#pinebuild-identity-box #identity-box {
  width: 10px;
  min-width: 10px;
  margin-right: 0px;
}

#pinebuild-identity-box #identity-icon-box {
  padding: 0px;
}

#pinebuild-identity-box #identity-icon {
  width: 10px;
  height: 10px;
}

#pinebuild-identity-box #identity-permission-box,
#pinebuild-identity-box #notification-popup-box {
 display: none;
}

#active-view-manager-overflow-panel {
  width: 39ch;
  font: menu;
}

#active-view-manager-overflow-panel > .subview-subheader {
  padding-block-start: var(--arrowpanel-menuitem-padding-block);
}

#active-view-manager-overflow-panel > .panel-subview-body {
  padding-block-end: var(--arrowpanel-menuitem-padding-block);
}

/** Page Info Panel **/

/* Page info security icons */
/** TODO: Some icons are borrowed from Firefox and may need replacing when UX provides them **/

#site-security-icon.aboutUI {
  background-image: url(chrome://branding/content/icon16.png);
}

#site-security-icon.readerMode {
  background-image: url("chrome://browser/skin/reader-mode.svg");
}

#site-security-icon.localResource {
  background-image: url(chrome://global/skin/icons/page-portrait.svg);
}

#site-security-icon.verifiedDomain {
  background-image: url(chrome://global/skin/icons/security.svg);
}

#site-security-icon.certErrorPage,
#site-security-icon.weakCipher,
#site-security-icon.mixedDisplayContent,
#site-security-icon.mixedDisplayContentLoadedActiveBlocked {
  background-image: url(chrome://global/skin/icons/security-warning.svg);
}

#site-security-icon.httpsOnlyErrorPage,
#site-security-icon.notSecure,
#site-security-icon.mixedActiveContent {
  background-image: url(chrome://global/skin/icons/security-broken.svg);
}

#site-security-icon.unknownIdentity {
  background-image: url(chrome://global/skin/icons/defaultFavicon.svg);
}

/** END Page info security icons **/

#page-action-panel {
  margin-inline-end: -20px;
  min-width: 285px;
}

#page-action-panel-sections {
  display: flex;
  flex-direction: column;
  padding: 8px;
}

#page-actions-section {
  display: flex;
  margin-block: 8px 4px;
}

#page-actions-section > toolbarbutton {
  appearance: none;
  -moz-box-orient: vertical;
  width: 62px;
  padding: 0;
  margin: 0;
}

#page-actions-section > toolbarbutton:not(:first-of-type) {
  margin-inline-start: 8px;
}

#page-actions-section > toolbarbutton > .toolbarbutton-icon {
  padding: 20px;
  border-radius: 100px;
  -moz-context-properties: fill;
  fill: var(--toolbarbutton-icon-fill);
  background-size: 15px;
  background-repeat: no-repeat;
  background-position: center;
  background-color: rgb(249,249,251);
  border: 1px solid rgba(0, 0, 0, 0.05);
}

#page-actions-section > toolbarbutton:hover > .toolbarbutton-icon {
  background-color: var(--button-hover-bgcolor);
}

#page-actions-section > toolbarbutton:active > .toolbarbutton-icon {
  background-color: var(--button-active-bgcolor);
}

#page-actions-section > toolbarbutton:focus-visible {
  outline: 2px solid var(--focus-outline-color);
  outline-offset: var(--focus-outline-offset, 2px);
}

#page-action-pin-view > .toolbarbutton-icon {
  background-image: url("chrome://browser/skin/pin-12.svg");
}

#page-action-copy-url > .toolbarbutton-icon {
  background-image: url("chrome://global/skin/icons/edit-copy.svg");
}

#page-action-close-view > .toolbarbutton-icon {
  background-image: url("chrome://global/skin/icons/close.svg");
}

#page-action-mute > .toolbarbutton-icon {
  background-image: url("chrome://global/skin/media/audio-muted.svg");
}

#page-action-mute[unmute] > .toolbarbutton-icon {
  background-image: url("chrome://global/skin/media/audio.svg");
}

#page-action-reader-mode > .toolbarbutton-icon {
  background-image: url("chrome://browser/skin/reader-mode.svg");
}

#page-action-more > .toolbarbutton-icon {
  background-image: url("chrome://global/skin/icons/more.svg");
}

#page-actions-section > toolbarbutton > .toolbarbutton-text {
  margin-block-start: 8px;
}

#site-info-section {
  display: flex;
  flex-direction: column;
  padding-inline: 4px;
}

#site-info-url-section,
#site-info-title-section {
  display: flex;
  margin-block-start: 6px;
}

#site-info-edit-icon {
  background: url("chrome://global/skin/icons/edit.svg") no-repeat right;
  width: 16px;
}

#site-info-title:focus ~ #site-info-edit-icon,
#site-info-title-section:not(:hover) #site-info-edit-icon {
  background: none;
}

#site-info-title:focus ~ #site-info-edit-icon {
  display: none;
}

#site-info-url:focus-visible,
#site-info-title:focus-visible {
  outline: 1px solid var(--focus-outline-color);
  border-radius: 4px;
  background: #F0F0F4;
  text-overflow: unset;
}

#site-info-title {
  font-size: 14px;
  margin: 0;
  padding-block: 7px;
  border: none;
  flex: 1;
  overflow: hidden;
}

#site-info-title,
#site-info-url {
  border-radius: 4px;
  text-overflow: ellipsis;
}

#site-info-url {
  flex: 1;
  margin: 0;
  border: 0;
  padding-block: 8px;
  background-color: var(--toolbar-field-background-color);
}

#site-security-info-section,
#site-info-title,
#site-info-url {
  padding-inline: 8px;
}

#site-security-info-section {
  margin-block: 12px 8px;
}

#site-security-icon {
  height: 16px;
  width: 16px;
  background-repeat: no-repeat;
  /**
   * Our site security icons have a 2px margin around them, which
   * makes aligning them to the spec a bit difficult. We work around
   * this by shaving off the 2px with a negative margin.
   */
  margin-inline: -2px;
}

#site-security-info {
  padding-inline-start: 6px;
  display: flex;
  align-items: center;
}

/** END Page Info Panel **/

/** Urlbar **/
#urlbar-page-overlay {
  transition-property: background-color;
  transition-timing-function: var(--animation-timing-function);
  transition-duration: 0s;
  background-color: rgba(255, 255, 255, 0.1);
}

@media (prefers-reduced-motion: no-preference) {
  #urlbar-page-overlay {
    transition-duration: 150ms;
  }
}

#urlbar-input {
  text-overflow: ellipsis;
}

#urlbar[breakout][breakout-extend] #urlbar-page-overlay {
  display: block;
  position: fixed;
  top: 0;
  bottom: 0;
  right: 0;
  left: 0;
  z-index: -1;
}

#urlbar[breakout][breakout-extend][breakout-extend-animate] #urlbar-page-overlay {
  background-color: rgba(0, 0, 0, 0.1);
}

#urlbar[breakout][breakout-extend] {
  /* -6px because we want to leave a bit of space between the top of the toolbar
     and the Urlbar. */
  top: calc((var(--urlbar-toolbar-height) - var(--urlbar-height)) / 2 - 8px);
  /* We shift the Urlbar right by the same size as its top border-radius.
     If we didn't, when the Urlbar overlaps the AVM, we'd show a notch of
     toolbar in the space between the Urlbar's rounded border and the edge of
     its outer box. */
  left: calc(-1 * var(--urlbar-border-radius));
  width: calc(100% + var(--urlbar-border-radius));
}

#urlbar-background {
  border-radius: var(--urlbar-border-radius);
  border: var(--urlbar-default-border);
}

#urlbar:focus #urlbar-background {
  border: var(--urlbar-focus-border);
}

#urlbar[breakout][breakout-extend] > #urlbar-input-container {
  /* Reduce the amount of blank space above and below the Urlbar by half. */
  height: calc(var(--urlbar-toolbar-height) - (var(--urlbar-toolbar-height) - var(--urlbar-height)) / 2);
}

/* Since we want topSitesButtons to have no margin, but it can't be positioned
   absolutely, we set margin-inline on each row, instead of the entire view. */
.urlbarView-row:not([dynamicType=topSitesButtons]) {
  margin-inline: var(--urlbar-margin-inline);
}

.urlbarView-row[dynamicType=topSitesButtons] {
  margin-block-start: calc(-1 * var(--urlbar-view-padding-block));
}

body[flow-reset] {
  --toolbarbutton-icon-fill: white;
  --toolbarbutton-hover-background: rgba(0,0,0, 0.2);
}

body[flow-reset] #urlbar[breakout],
body[flow-reset] #urlbar[breakout][breakout-extend] {
  display: block;
  position: fixed;
  top: calc((var(--urlbar-toolbar-height) + 35%));
  left: var(--companion-width);
  right: 0;
  width: -moz-available;
  border-radius: calc(var(--urlbar-border-radius) * 2);
  z-index: 999;
  max-width: 600px;
  margin: 0 auto;
}

body[flow-reset] #urlbar:not([open])[breakout] > #urlbar-background,
body[flow-reset] #urlbar[breakout] > #urlbar-input-container {
  height: calc(1.5 * var(--urlbar-height));
  font-size: 16px;
  /* We use a margin variable in a padding rule because the Pro Client Urlbar
     shifts some of the Firefox Urlbar global margin rules to instead apply to
     individual elements. We must reflect that margin in the unopened flow-reset
     Urlbar so that the search icon doesn't jump when the Urlbar is opened. */
  padding-inline: calc(var(--urlbar-margin-inline) + var(--urlbar-container-padding));
}

body[flow-reset] #urlbar-background {
  background: rgba(255,255,255,0.74);
  border-radius: calc(var(--urlbar-border-radius) * 2);
}

body[flow-reset] #urlbar[open] #urlbar-background {
  border-radius: var(--urlbar-border-radius);
}

/** END Urlbar **/

.browser-toolbar:not(.titlebar-color) {
  --toolbar-bgcolor: white;
}

#session-setaside-button > .toolbarbutton-icon {
  background: url(chrome://browser/skin/session-setaside.svg) no-repeat center;
}

.confirmation {
  position: fixed;
  top: 100px;
  left: calc(50% + var(--companion-width) / 2);
  background: white;
  border: 0.5px solid #CFCFD8;
  box-shadow: 0px 2px 6px rgba(58, 57, 68, 0.2);
  border-radius: 50px;
  padding: 6px 8px;
  font-weight: 600;
  transition: opacity 500ms;
  line-height: 18px;
  transform: translateX(-50%);
}

.confirmation > img {
  vertical-align: middle;
}

.confirmation.fadeout {
  opacity: 0;
}

#companion-sidebar-button {
  background-color: var(--pinebuild-highlight-color);
  border: 0.5px solid var(--colors-lavender-06);
  border-radius: 50%;
  box-sizing: border-box;
  box-shadow: inset 0 2px 4px rgba(183, 155, 242, 0.8);
}

#companion-sidebar-button:hover > .toolbarbutton-icon {
  background-color: transparent;
}

body[flow-reset] #companion-sidebar-button {
  background-color: var(--colors-lavender-06);
}

companion-manager {
  background: var(--colors-cafe-02);
  border-radius: 16px;
  margin: 0 16px 16px;
}

body[flow-reset] companion-manager {
  background: linear-gradient(165.47deg, rgba(251, 250, 249, 0.3) 64.97%, rgba(251, 250, 249, 0.2) 105.74%);
}

.sidebar-splitter {
  border: none;
}

.titlebar-buttonbox-container {
  -moz-box-align: center;
}

@media (-moz-windows-compositor) {
  .titlebar-button {
    padding: 10px;
    border-radius: 4px;
    /* Unfortunately this !important is needed to override a
       `margin: 0 !important;` inside browser-aero.css */
    margin: 4px !important;
    opacity: 1;
  }

  [flow-reset] .titlebar-button {
    stroke: white;
  }

  .titlebar-buttonbox-container {
    margin-inline: 16px 20px;
  }
}

:root[chromehidden~="toolbar"] #pinebuild-toolbar,
:root[chromehidden~="toolbar"] #session-setaside-button {
  display: none;
}

toolbar .toolbarbutton-1 > .toolbarbutton-icon {
  width: 32px;
  height: 32px;
}

toolbar .toolbarbutton-1 {
  margin: 12px var(--toolbarbutton-outer-padding);
  padding: 0;
}
